--[[
    Made by: TheNonStopProgrammer
    Explanation: coreNetwork is a API that allows for sending and handling messages.
    First a program has to login with coreNetwork.login()
    this logs the computer in with its label.
    after that you can use coreNetwork.sendMessage to send a message and
    you MUST USE coreNetwork.pullEvent()
    this handles all internal messages.
    and raises a event network_message with message, sender and target as arguments.
    
    packet structure:
    Identifier : what kind of packet is this file, string, table, etc.
    sender : who send this packet
    receiver : target host name
    data : data that was send
]]

--loading core utils
os.loadAPI("coreUtils")

--loading config in network folder
local settings = coreUtils.loadConfig("network/settings", false)

--setting up modem
local modem = peripheral.wrap(settings["side"])
if settings["port"] == "" then settings["port"] = os.getComputerID() end
if settings["port"] == nil then settings["port"] = os.getComputerID() end
if settings["hostname"] == nil then settings["hostname"] = os.getComputerLabel() end

fs.makeDir("Downloads")
settings["port"] = tonumber(settings["port"])
modem.open(settings["port"])
local dhcpPort = 1

loggedIN = false
local timerID = nil

if modem.isWireless() then
    if settings["ssid"] ~= nil then
        print("Enabling wireless modem on ssid: "..settings["ssid"])
        dhcpPort = tonumber(settings["ssid"])
        else
        print("Wireless ssid not set")
    end
end

function login()    
    if settings["hostname"] ~= nil then
        timerID = os.startTimer(2)
        modem.transmit(dhcpPort,settings["port"],coreUtils.packetBuilder("network","DHCP",settings["hostname"],"login"))
        repeat
            pullEvent()
        until timerID == nil
        else
        print("Error: No hostname.")
        return false
    end
end

function logout()
    if loggedIN then
        timerID = os.startTimer(2)
        modem.transmit(dhcpPort,settings["port"],coreUtils.packetBuilder("network","DHCP",settings["hostname"],"logout")) 
        repeat
            pullEvent()
        until timerID == nil
        else
        print("Error: Not logged in")
        return false
    end
end

function getHosts()   
    if loggedID then
        timerID = os.startTimer(2)
        modem.transmit(dhcpPort,settings["port"],coreUtils.packetBuilder("network","DHCP",settings["hostname"],"hosts")) 
        local event, identifier, message
        repeat
            event, identifier, message = pullEvent()
        until timerID == nil
        if event == "network_message" and identifier = "hosts" then
        return message
        end
        else
        print("Error: Not logged in.")
        return nil
    end
end

function sendMessage(target, identifier, payload)
    if loggedIN then
        timerID = os.startTimer(2)
        modem.transmit(dhcpPort,settings["port"],coreUtils.packetBuilder(identifier,target,settings["hostname"],payload))
        repeat
            pullEvent()
        until timerID == nil
        else
        print("Error: Not logged in.")
    end
end

function sendFile(target, file, message)
    if loggedIN then
        local f = fs.open(file, "r")
        if f ~= nil then
            local payload = {}
            local line
            repeat
                line = f.readLine()
                payload[#payload + 1] = line
            until line == nil
            f.close()
            local folder, name = coreUtils.getFile(file)
            payload["name"] = name
			payload["message"] = message
            modem.transmit(dhcpPort,settings["port"],coreUtils.packetBuilder("file",target,settings["hostname"],payload))
            else
            print("Error: File not found.")
        end        
        else
        print("Error: Not logged in.")
    end
end

function pullEvent()
    while true do
        event, a, b, c, d, e = os.pullEvent() 
        if event == "modem_message" and c == dhcpPort then            
            local data = textutils.unserialize(d)
            if data["identifier"] == "network" then
                if type(data["data"]) == "table" then
                    timerID = nil
                    return "network_message", "hosts", data["data"]
                    else
                    loggedIN = (data["data"] == "true")
                    timerID = nil
                    return
                end
                elseif data["identifier"] == "file" then
                local h = fs.open("Downloads/"..data["data"]["name"],"w")
                for i,v in ipairs(data["data"]) do h.writeLine(v) end
                h.close()
            return "network_message", "file", data["sender"], data["target"], data["data"]["name"], data["data"]["message"]
                elseif data["identifier"] == "command" then
                x = loadstring(data["data"])()
                elseif data["identifier"] == "log" then
                print(data["data"])
                else
                return "network_message", data["identifier"], data["sender"], data["target"], data["data"]
            end
            elseif event == "modem_message" and settings["raise"] == "true" then
            return "modem_message",a,b,c,d,e            
            elseif event == "timer" and a == timerID then
            print("No response. Is DHCP offline?")
            timerID = nil
            return "failed_message"
            else
            return event, a, b, c, d, e
        end
    end
end

function isLoggedIN()
return loggedIN
end

function getHostname()
return settings["hostname"]
end

function getComPort()
return settings["port"]
end

function getSSID()
return settings["ssid"]
end