--[[
    Made by: TheNonStopProgrammer
    Explanation: accesspoint connects a wired network to a wireless network.
    The accesspoint it self doesnt have a hostname, but every login that is made through the
    wireless part is send to the router or bridge
]]
os.loadAPI("coreUtils")

settings = {}
settings = coreUtils.loadConfig("network/settings", true)
if settings["port"] == "" then settings["port"] = os.getComputerID() end
if settings["ssid"] == "" then settings["ssid"] = os.getComputerID() end
hosts = {}

--Accespoint wireless spoofs a hdcp server
--Accespoint wired is a network device using multiple host names

--starting accesspoint
local modem_wired = peripheral.wrap(settings["side_wired"])
local modem_wireless = peripheral.wrap(settings["side_wireless"])
settings["port"] = tonumber(settings["port"])
settings["ssid"] = tonumber(settings["ssid"])
modem_wired.open(settings["port"])
modem_wireless.open(settings["ssid"])
print("Wireless accespoint ssid: "..settings["ssid"])

--Add host to the table
function newHost(hostname, port)
    if hosts[hostname] == nil then
        hosts[hostname] = tonumber(port)
        print("New host: "..hostname)
        return true
    end
    return hosts[hostname] == port
end

function removeHost(hostname)
    if hosts[hostname] ~= nil then
        hosts[hostname] = nil
        print("Removed host: "..hostname)
        return true
    end
    return false
end

--Handle a wired message
function handleWired(freq, repfreq, message)
    if repfreq == 1 then
        local result, data = pcall(textutils.unserialize, message)
        if result then
        modem_wireless.transmit(hosts[data["target"]],settings["ssid"],message)
        if data["identifier"] == "network" and data["data"] == "false" then
            removeHost(data["target"])
        end
        else
        print("ERROR: "..message)
    end
    end
end

--Handle a wireless message
function handleWireless(freq, repfreq, message)
   local result, data = pcall(textutils.unserialize, message)
    if result then
        if data["identifier"] == "network" then
            if data["data"] == "login" then
                modem_wired.transmit(1, settings["port"], message)               
            end
            else
            if table.contains(hosts,data["target"]) then
            modem_wireless.transmit(hosts[data["target"]],1,message)
            else
            modem_wired.transmit(1,settings["port"],message)
            end
            modem_wireless.transmit(replyChannel, 1, coreUtils.packetBuilder("network", data["sender"], data["target"], "true"))
        end
        else
        print("ERROR: "..message)
    end
end

--Main loop
while true do
    local type_event, side, freq, repfreq, message, distance = os.pullEvent("modem_message")
    if side == settings["side_wired"] then handleWired(freq, repfreq, message) end
    if side == settings["side_wireless"] then handleWireless(freq, repfreq, message) end
end
