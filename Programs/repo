--[[
    Made by: TheNonStopProgrammer
    Explanation: Host the programs that can be installed by apt-get, keeps track of versions and dependencies.
]]
function file_exists(name)
    local f = io.open(name,"r")
    if f~= nil then 
        io.close(f)
        return true
        else
        return false
    end
end

function switch(w1,w2)
    return (string.sub(w2,1,1) ~= "/")
end

function buildProgram()
    print("Building program list...")
    return fs.list("install")
end

function table.contains(table, element)
    for _, value in pairs(table) do
        if value == element then
            return true
        end
    end
    return false
end

function getFile(path)
    return string.match(path, "(.-)([^\\/]-%.?([^%.\\/]*))$")
end

function handleNew()
    sleep(0.5)
    local location = nil
    local deps = {}
    local name = nil
    while true do
        print("Program location?")
        location = read()
        folder, name = getFile(location)
        if file_exists(location) and not table.contains(myPrograms, name) then break else return end
    end
    while true do
        print("Dependencies? (leave empty when done)")
        local dep = read()    
        if table.contains(myPrograms,dep) then
            table.insert(deps,dep)
        end
        if dep == nil or dep == "" then break end
    end        
    print("Install folder? (Must end with /")
    local folder = read()            
    print("Add program: "..location)
    print("With dependencies:")
    for i,v in ipairs(deps) do print(v) end
    print("With install folder: "..folder)
    print("To the the database? (y/n)")
    input = read()
    if input == "y" or input == "Y" then
        print("Copying file..")
        fs.copy(location, "programs/"..name)
        print("Making install fill..")
        deps["version"] = 1
        deps["folder"] = folder
        local f = assert(io.open("install/"..name, "w"))
        f:write(textutils.serialize(deps))
        f:close()
        print("Done, reloading myPrograms list")
        myPrograms = buildProgram()
    end
end

function handleUpdate()
    sleep(0.5)
    local location = nil
    local deps = {}
    local name = nil
    while true do
        print("Program location?")
        location = read()
        folder, name = getFile(location)
        if file_exists(location) then break end
        print("Not a know program")
    end
    print("Modify dependencies? (y/n)")
    local dep_changed = read()
    while dep_changed == "y" or dep_changed == "Y" do
        print("Dependencies? (leave empty when done)")
        local dep = read()    
        if table.contains(myPrograms,dep) then
            table.insert(deps,dep)
        end
        if dep == nil or dep == "" then break end
    end
    local f = fs.open("install/"..name, "r")
    local text = f.readLine()
    f.close()
    local old = textutils.unserialize(text)    
    if dep_changed ~= "y" and dep_changed ~= "Y" then
        deps = old
    end
    deps["version"] = old["version"] + 1
    deps["folder"] = old["folder"]
    print("Add program: "..location)
    print("With dependencies:")
    for i,v in ipairs(deps) do print(v) end
    print("With install folder: "..deps["folder"])
    print("To the the database? (y/n)")
    input = read()
    if input == "y" or input == "Y" then
        print("Updating file..")
        fs.delete("programs/"..name)
        fs.copy(location, "programs/"..name)
        print("Updating install file..")
        local f = assert(io.open("install/"..name, "w"))
        f:write(textutils.serialize(deps))
        f:close()
        print("Done, reloading myPrograms list")
        myPrograms = buildProgram()
    end
end

function addDeps(program, tabel)
    local f = fs.open("install/"..program,"r")
    local text = f.readLine()
    f.close()
    local data = textutils.unserialize(text)
    for i,v in ipairs(data) do 
        if i ~= "version" then
            addDeps(v,tabel)
            tabel[#tabel+1] = v
        end        
    end    
end

function loadInstallFile(filename)
    local h = fs.open("install/"..filename)
    local data = textutils.unserialize(h.readLine())
    h.close()
    return data
end

os.loadAPI("coreNetwork")
coreNetwork.login()

if not fs.exists("programs") then fs.makeDir("programs") end
if not fs.exists("install") then fs.makeDir("install") end
print("Repo server running. Name: "..os.getComputerLabel())
myPrograms = buildProgram()
print("Programs loaded: "..table.getn(myPrograms))
print("Server is running, press n for a new program, press u to update a program or l for the list programs")
while true do
    event, identifier, sender, target, message = coreNetwork.pullEvent()
    if event == "network_message" then
        if identifier == "get" then
            if table.contains(myPrograms, message) then
                local data = {}
                local install = loadInstallFile(message)
                data["version"] = install["version"]
                data["folder"] = install["folder"]
                coreNetwork.sendFile(sender, "programs/"..message,data)
            end
            elseif identifier == "update" then
            if table.contains(myPrograms, message) then
                local install = loadInstallFile(message["name"])
                if install["version"] == message["version"] then
                    coreNetwork.sendMessage(sender, "update", "update") --The same notify apt-get
                    else
                    data["version"] = install["version"]
                    data["folder"] = install["folder"]
                    coreNetwork.sendFile(sender, "programs/"..message,data)
                end                
                else             
                coreNetwork.sendMessage(sender, "Not here", "Not here")
            end
            elseif identifier == "install" then
            local data = {}
            if table.contains(myPrograms, temp["name"]) then
                data["has"] = true
                local deps = {}
                deps[1] = temp["name"]
                addDeps(temp["name"],deps)
                data["files"] = deps
                else
                data["has"] = false
            end
            coreNetwork.sendMessage(sender,textutils.serialize(data))
            else
            print("not a valid input received")
        end
    end
    if event == "key" then --n = 49, u == 22
        if identifier == 49 then handleNew() end
        if identifier == 22 then handleUpdate() end
        if identifier == 38 then
            for i,v in ipairs(myPrograms) do print(v) end
        end
    end
end

coreNetwork.logout()
