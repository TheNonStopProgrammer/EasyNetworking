--[[
    Made by: TheNonStopProgrammer
    Explanation: Used for browsing on a fileServer
]]

os.loadAPI("coreNetwork")
coreNetwork.login()
term.clear()
term.setCursorPos(1,1)
file_download = nil
print("Fileserver name: ")
local input = nil

while input == nil do
    input = read()
    coreNetwork.sendMessage(input,"hello","hello")
    os.startTimer(2)
    repeat
        local event, identifier, sender, target, message = coreNetwork.pullEvent()
        if event == "timer" then input = nil end
    until (event == "network_message" and identifier == "hi") or event == "timer"
end

working_dir = ""
local x,y = term.getSize()
local range_min = 1
local range_max = y-1
local current_pos = 1
coreNetwork.sendMessage(input,"list",working_dir)
local list = {}


function draw()    
    term.clear()
    term.setCursorPos(1,1)
    for i=range_min,range_max do
        if list[i] ~= nil then
            if current_pos == i then
                print(">"..list[i])
                else
                print(list[i]) 
            end
        end
    end
end

function isDir(name)
    return (string.sub(name,1,1) == "/")
end

function handle()
    if current_pos == 1 then --The back folder option
        working_dir,_ = coreUtils.getFile(working_dir)
        coreNetwork.sendMessage(input,"list",working_dir)
        elseif current_pos == #list-1 then --Upload a file
            term.clear()
            term.setCursorPos(1,1)
            print("File location?")
            local fileName = read()
            if fileName ~= nil then
                if fs.exists(fileName) and not fs.isDir(fileName) then
                    coreNetwork.sendFile(input,fileName,working_dir)
                end
            end
            coreNetwork.sendMessage(input,"list",working_dir)
        elseif current_pos == #list-2 then --Make a directory
            term.clear()
            term.setCursorPos(1,1)
            print("Folder name?")
            local folderName = read()
            if folderName ~= nil and folderName ~= "" then
            coreNetwork.sendMessage(input,"makedir",working_dir..folderName)
            end
            coreNetwork.sendMessage(input,"list",working_dir)
            draw()
        elseif current_pos < #list-3 then --File or folder selected
        if isDir(list[current_pos]) then
            working_dir = working_dir..list[current_pos]
            coreNetwork.sendMessage(input,"list",working_dir)
            else
            coreNetwork.sendMessage(input,"get",working_dir.."/"..list[current_pos])
            end       
    end
end

while true do
    local event, identifier, sender, target, message, fileMessage = coreNetwork.pullEvent()
    if event == "mouse_scroll" then
        current_pos = current_pos + identifier
        elseif event == "key" then
        if identifier == 200 then current_pos = current_pos - 1
            elseif identifier == 208 then current_pos = current_pos + 1
            elseif identifier == 211 then
            term.clear()
            term.setCursorPos(1,1)
            local file
            if isDir(list[current_pos]) then
            file = working_dir..list[current_pos]
            if isDir(file) then file = string.sub(file,2) end
            else 
            file = working_dir.."/"..list[current_pos]
            end
            print("Sure you want to delete "..file.."? [y/n]")
            local choice = read()
            if choice == "y" or choice == "yes" then
                coreNetwork.sendMessage(input,"del",file)
                coreNetwork.sendMessage(input,"list",working_dir)
            end
            elseif identifier == 28 then
            if current_pos == #list then break
            else handle() end
        end
        elseif event == "mouse_click" then
        if current_pos == #list then break
        else handle() end
        elseif event == "network_message" and sender == input then
        if identifier == "list" then
            list = {}
            list = coreUtils.deepcopy(message)
            table.insert(list,1,"..")
            list[#list+1] = "---- Options ----"
        list[#list+1] = "Make a directory"
        list[#list+1] = "Upload a file"
        list[#list+1] = "Quit file browser"    
        elseif identifier == "file" then
        term.setCursorPos(1,1)
        term.clear()
        print("File received")
        sleep(2)
        end
    end
    current_pos = math.max(1,current_pos)
    current_pos = math.min(current_pos,#list)
    if range_min > current_pos then
        range_min = range_min - 1 
        range_max = range_max - 1
    end
    if range_max < current_pos then 
        range_max = range_max + 1 
        range_min = range_min + 1
    end
    draw()
end 
coreNetwork.logout()
term.clear()
term.setCursorPos(1,1)  